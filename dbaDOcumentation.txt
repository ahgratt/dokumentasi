SELECT agama, COUNT(agama) AS jumlah FROM mahasiswa GROUP BY agama ORDER BY jumlah;
SELECT nama, tanggal_lahir, YEAR(tanggal_lahir), MONTH(tanggal_lahir), DAY(tanggal_lahir) FROM mahasiswa;
/* 
ADD KEY untuk memasukan data dalam table,
SELECT untuk mengambil value dalam table,
COUNT untuk menghitung data value yang ada,
AS untuk penamaan header data value,
FROM untuk mengambil value(table),
GROUP BY untuk mengelompokan value,
ORDER BY untuk menunjuk value dan mensortir value (asc dari yang terlecil)/(dsc dari yang terbesar),
YEAR untuk mengelompokan value tahun,
MONTH untuk mengelompokan value bulan,
DAY untuk mengelompokan value tanggal, 
CONCAT untuk menggabungkan value menghasilkan nilai varchart atau string atau text*/
CONCAT(
    DAY(tanggal_lahir),
    ' / ',
    MONTH(tanggal_lahir),
    ' / ',
    YEAR(tanggal_lahir)
) AS tanggallahir /* 26 / 9 / 1991 */
/*
CONCAT_WS memiliki funsi yang sama seperti CONCAT tapi dengan cara yang berbeda */
CONCAT_WS(' / ',
    DAY(tanggal_lahir),
    MONTH(tanggal_lahir),
    YEAR(tanggal_lahir)
) AS tanggallahir /* 26 / 9 / 1991 */
/*
CREATE  untuk menambah database, table, atau data yang lain.
CREATE VIEW untuk menambah view pada database,
LEFT untuk mengambil value dari arah kiri contoh LEFT(value_database,value),
*/
SELECT mahasiswa.*, agama. inggris FROM mahasiswa LEFT JOIN agama ON mahasiswa.agama = agama.indonesia WHERE agama.indonesia IS null ORDER BY id;
// berfungsi untuk menampilkan data value yang tidak cocok dengan database.
/*
INNER JOIN utuk menggabungkan database atau value lain,
ON untuk menentukan dimana akan dituju,
WHERE untuk menentukan dimana value itu berada,
LIKE untuk mencari pola yang ditentukan pada kolom / field,
contoh :
*/
SELECT mahasiswa_view.nama, mahasiswa_view.provinsi, mahasiswa_view.kabupaten, adm.provinsi.provinsi, adm.kabupaten.kabupaten FROM mahasiswa_view INNER JOIN adm.provinsi ON mahasiswa_view.provinsi = adm.provinsi.provinsi_id INNER JOIN adm.kabupaten ON mahasiswa_view.kabupaten = adm.kabupaten.kabupaten_id;

contoh function perkalian dalam sql :
    DELIMITER $$
    CREATE FUNCTION perkalian(angka_1 INT, angka_2 INT) RETURNS INT
    BEGIN 
    	DECLARE x INT;
        SET x = angka_1 * angka_2;
        RETURN x;
    END;
contoh function menghitung umur :
    DELIMITER $$
    CREATE FUNCTION umur(tanggal_1 date, tanggal_2 date) RETURNS int
    BEGIN 
    	DECLARE x int;
        set x = YEAR(tanggal_2) - YEAR(tanggal_1); // dengan tahun
        set x = (tanggal_2 - tanggal_1)/365; //dengan hitungan hari tapi tetap dibaca tahun dan lebih akurat
        RETURN x;
    END;
contoh pemanggilan function menghitung umur :
SELECT nama, tanggal_lahir, umur(tanggal_lahir, now()) as usia from databaseName;

    DELIMITER $$
    CREATE FUNCTION huruf (nilai INT) RETURNS VARCHAR(5)
    BEGIN
    DECLARE x VARCHAR(5);
    	IF nilai > 80 THEN
    		SET x = 'A';
    	ELSEIF nilai > 70 THEN
    		SET x = 'B';
    	ELSEIF nilai > 60 THEN
    		SET x = 'C';
    	ELSEIF nilai > 50 THEN
    		SET x = 'D';
    	ELSE
    		SET x = 'E';
    	END IF;
    	
    	RETURN x;
    END

   
pastikan database tersebut sudah ada tabel tanggal lahir yang memuat data tentang tanggal lahir.
contoh function menghitung nilai huruf:
DELIMITER $$
CREATE FUNCTION huruf (nilai INT) RETURNS VARCHAR(5)
BEGIN
DECLARE x VARCHAR(5);
	IF nilai > 80 THEN
		SET x = 'A';
	ELSEIF nilai > 70 THEN
		SET x = 'B';
	ELSEIF nilai > 60 THEN
		SET x = 'C';
	ELSEIF nilai > 50 THEN
		SET x = 'D';
	ELSE
		SET x = 'E';
	END IF;
	
	RETURN x;
END
mencari nilai angka dengan rendom :
DELIMITER $$
CREATE FUNCTION huruf (nilai varchar(1)) RETURNS VARCHAR(5)
BEGIN
    DECLARE x VARCHAR(5);
    IF nilai = 'A' THEN
    SET x = 'beetwen 81 and 100';
    ELSEIF nilai =' B' THEN
    SET x = 'beetwen 71 and 80';
    ELSEIF nilai = 'C' THEN
    SET x = 'beetwen 61 and 70';
    ELSEIF nilai = 'D' THEN
    SET x = 'beetwen 51 and 60';
    ELSEIF nilai = 'E' THEN
    set x = 'beetwen 0 and 50';
    else 
    set x = 'tidak ada nilai';
END IF;
RETURN x;
END
contoh function provinsi dalam database:
DELIMITER $$
CREATE FUNCTION provinsi(kode VARCHAR(20)) RETURNS VARCHAR(50)
BEGIN 
    DECLARE x VARCHAR(50);
    SELECT provinsi INTO x FROM adm.provinsi WHERE provinsi_id= LEFT(kode,2);
    RETURN x;
END
catatan : harus memiliki database provinsi 
contoh pembuatan procedur edit pada sql :
	DELIMITER $$
	CREATE PROCEDURE data_edit1(id1 INT, kolom VARCHAR(100), nilai VARCHAR(100))
	BEGIN	
		IF kolom = 'nama' THEN
	    		UPDATE mahasiswa SET nama = nilai WHERE id = id1;
	   	ELSEIF kolom = 'alamat' THEN
	    		UPDATE mahasiswa SET alamat = nilai WHERE id = id1;
	    	END IF;
	END $$
cara pemanggilan procedur edit pada sql
	call data_edit(1,'alamat','pontianak');

membuat trigger yang dapat mencatat histori perubahan pada database
contoh membuat trigger edit :
DELIMITER $$
CREATE TRIGGER trigger_after_edit
BEFORE UPDATE
    ON data FOR EACH ROW
BEGIN
    DECLARE vUser varchar(255);
    SELECT USER() INTO vUser;
    INSERT INTO
    	data_history
    SET
		nama_lama = OLD.nama,
        nama_baru = NEW.nama,
		alamat_lama = OLD.alamat,
        alamat_baru = NEW.alamat,
        tanggal_berubah = NOW(),
        status = 'after edit',
        user = vUser;
END
membuat fungsi capitalize pada mysql
DELIMITER $$
CREATE FUNCTION capitalize(s varchar(255))RETURNS varchar(255)
BEGIN
declare c int;
declare x varchar(50);
declare y varchar(50);
declare z varchar(50);
 set x = UPPER(SUBSTRING(s ,1 ,1));
set y = lower(SUBSTR(s, 2));
set c = instr( y, ' ');

while c > 0
do
set z = substr(y, 1, c);
set x = concat(x, z);
set z = upper(substr(y, c+1, 1));
set x = concat(x,z);
set y = substr(y, c+2);
set c = instr(y, '');

end while;
set x = concat(x, y);
return x;
END$$
DELIMITER ;

contoh membuat user baru :
create user 'nama_user'@localhost IDENTIFIED VIA mysql_native_password using 'password';
contoh membuat grant pada user :
grant select on "nama_database" to "nama_user"@localhost;
